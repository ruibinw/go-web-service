// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ryan_Wang",
            "email": "Ryan_Wang@epam.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/records": {
            "get": {
                "description": "Returns a page of records with specified page number and size.\u003cbr\u003e\nCurrently only supports search by displayName.",
                "tags": [
                    "records"
                ],
                "summary": "Get records list with pagination and search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by displayName",
                        "name": "displayName",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default is 0)",
                        "name": "pageNum",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default is 10)",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Record"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Create a record",
                "parameters": [
                    {
                        "description": "Create Record Request",
                        "name": "record",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/record.CreateRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Record"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/records/{id}": {
            "get": {
                "tags": [
                    "records"
                ],
                "summary": "Get a record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Get Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Record"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Update a record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Update Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Record Request",
                        "name": "record",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/record.UpdateRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Record"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "records"
                ],
                "summary": "Delete a record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Delete Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Record": {
            "type": "object",
            "properties": {
                "created_time": {
                    "description": "CreatedTime of a record",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-10-29T18:31:22.378373+08:00"
                },
                "description": {
                    "description": "Description of a record",
                    "type": "string",
                    "example": "A book to learn Go"
                },
                "display_name": {
                    "description": "DisplayName of a record",
                    "type": "string",
                    "example": "Learning Go"
                },
                "id": {
                    "description": "ID of a record",
                    "type": "integer",
                    "example": 1
                },
                "updated_time": {
                    "description": "UpdatedTime of a record",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-10-29T18:31:22.378373+08:00"
                },
                "url": {
                    "description": "Url of a record",
                    "type": "string",
                    "example": "/record/learning-go"
                }
            }
        },
        "record.CreateRecordRequest": {
            "type": "object",
            "required": [
                "display_name",
                "url"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "This is description"
                },
                "display_name": {
                    "type": "string",
                    "example": "name"
                },
                "url": {
                    "type": "string",
                    "example": "/url"
                }
            }
        },
        "record.UpdateRecordRequest": {
            "type": "object",
            "required": [
                "display_name",
                "url"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "This is a description"
                },
                "display_name": {
                    "type": "string",
                    "example": "name"
                },
                "url": {
                    "type": "string",
                    "example": "/url"
                }
            }
        },
        "utils.ErrorMessage": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Go Web Service",
	Description:      "A simple REST Web service written in Go that supports CRUD operations.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
